#ifndef TESTUTILS_H
#define TESTUTILS_H

#include <string>
#include <fstream>
#include <cstring>
#include <vector>
#include "DenseEigen.h"


namespace hfox{

class TestUtils{

  public:

  static std::string getRessourcePath(){
    std::string cmake_src = "@CMAKE_SOURCE_DIR@";
    return std::string(cmake_src + "/ressources");
  };//getRessourcePath

  static bool checkFilesEqual(const std::string& lFilePath, const std::string& rFilePath){
    std::ifstream lFile(lFilePath.c_str(), std::ifstream::in | std::ifstream::binary);
    std::ifstream rFile(rFilePath.c_str(), std::ifstream::in | std::ifstream::binary);

    if(!lFile.is_open() || !rFile.is_open())
    {
      return false;
    }

    int buff_size = 1024;

    char *lBuffer = new char[buff_size]();
    char *rBuffer = new char[buff_size]();

    do {
      lFile.read(lBuffer, buff_size);
      rFile.read(rBuffer, buff_size);

      if (std::memcmp(lBuffer, rBuffer, buff_size) != 0)
      {
        delete[] lBuffer;
        delete[] rBuffer;
        return false;
      }
    } while (lFile.good() || rFile.good());

    delete[] lBuffer;
    delete[] rBuffer;
    lFile.close();
    rFile.close();
    return true;
  };

  template <class T>
    static std::vector<T> unpack(std::vector< std::vector<T> > v){
      std::vector<T> res(v.size()*v[0].size());
      int index = 0;
      for(int i = 0; i < v.size(); i++){
        for(int j = 0; j < v[i].size(); j++){
          res[index] = v[i][j];
          index += 1;
        }
      }
      return res;
    };
  
  static std::vector< std::vector<double> > linElement(const std::vector< std::vector<double> > & nodes, 
      const EMatrix & Jac, const std::vector<double> & offset){
    std::vector< std::vector<double> > res(nodes.size(), std::vector<double>(Jac.rows(), 0.0));
    Eigen::Map<const EVector> shift(offset.data(), offset.size());
    for(int i = 0; i < nodes.size(); i++){
      Eigen::Map<const EVector> refNode(nodes[i].data(), nodes[i].size()); 
      Eigen::Map<EVector> elNode(res[i].data(), res[i].size());
      elNode = Jac*refNode + shift;
    }
    return res;
  };

  static double intx2n(int dim, int ord){
    double res = 0;
    if(dim < 3){
      res = 2.0/(2.0*ord + 1);
    } else if(dim == 3){
      res = 1.0/(2.0*ord+3.0) + 1.0/(2.0*ord + 1.0);
    }
    return res;
  };

};//TestUtils

}

#endif//TESTUTILS_H
